{
  "name": "ai-input-17",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\nimport { ArrowUpCircle, Paperclip, Globe, Figma } from \"lucide-react\";\n\nexport default function AIInput_17() {\n    const [value, setValue] = useState(\"\");\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n        minHeight: 80,\n        maxHeight: 200,\n    });\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            if (value.trim()) {\n                setValue(\"\");\n                adjustHeight(true);\n            }\n        }\n    };\n\n    return (\n        <div className=\"p-4 min-w-full\">\n            <div className=\"relative\">\n                <div className=\"relative flex flex-col border border-black/10 dark:border-white/10 rounded-xl\">\n                    <div className=\"overflow-y-auto\">\n                        <Textarea\n                            ref={textareaRef}\n                            value={value}\n                            onChange={(e) => {\n                                setValue(e.target.value);\n                                adjustHeight();\n                            }}\n                            onKeyDown={handleKeyDown}\n                            placeholder=\"Ask me anything...\"\n                            className={cn(\n                                \"w-full px-4 py-3\",\n                                \"resize-none\",\n                                \"bg-transparent\",\n                                \"border-none\",\n                                \"focus:outline-hidden\",\n                                \"focus-visible:ring-0 focus-visible:ring-offset-0\",\n                                \"placeholder:text-black/50 dark:placeholder:text-white/50\",\n                                \"align-top leading-normal\",\n                                \"min-h-[80px]\"\n                            )}\n                            style={{\n                                overflow: \"hidden\",\n                                outline: \"none\",\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"h-14\">\n                        <div className=\"absolute left-3 right-3 bottom-3 flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                                <button\n                                    type=\"button\"\n                                    className=\"p-2 text-black/50 dark:text-white/50 hover:text-black dark:hover:text-white transition-colors rounded-lg border border-black/10 dark:border-white/10 hover:border-black/20 dark:hover:border-white/20\"\n                                >\n                                    <Paperclip className=\"w-4 h-4\" />\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"p-2 text-black/50 dark:text-white/50 hover:text-black dark:hover:text-white transition-colors rounded-lg border border-black/10 dark:border-white/10 hover:border-black/20 dark:hover:border-white/20\"\n                                >\n                                    <Globe className=\"w-4 h-4 text-blue-500\" />\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    className=\"p-2 text-black/50 dark:text-white/50 hover:text-black dark:hover:text-white transition-colors rounded-lg border border-black/10 dark:border-white/10 hover:border-black/20 dark:hover:border-white/20\"\n                                >\n                                    <Figma className=\"w-4 h-4 text-pink-500\" />\n                                </button>\n                            </div>\n                            <button\n                                type=\"button\"\n                                className={cn(\n                                    \"p-2 transition-colors\",\n                                    value.trim()\n                                        ? \"text-blue-500 hover:text-blue-600\"\n                                        : \"text-black/30 dark:text-white/30\"\n                                )}\n                            >\n                                <ArrowUpCircle className=\"w-6 h-6\" />\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/portui/ai-input/ai-input-17.tsx",
      "target": "/components/portui/ai-input-17.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useCallback, useRef } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n  minHeight?: number;\r\n  maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n  minHeight = 40,\r\n  maxHeight,\r\n}: UseAutoResizeTextareaProps = {}) {\r\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const adjustHeight = useCallback(() => {\r\n    const textarea = textAreaRef.current;\r\n    if (!textarea) return;\r\n    textarea.style.height = `${minHeight}px`;\r\n    const newHeight = Math.max(\r\n      minHeight,\r\n      Math.min(textarea.scrollHeight, maxHeight ?? Number.POSITIVE_INFINITY)\r\n    );\r\n    textarea.style.height = `${newHeight}px`;\r\n  }, [minHeight, maxHeight]);\r\n\r\n  useEffect(() => {\r\n    const textarea = textAreaRef.current;\r\n    if (textarea) {\r\n      adjustHeight();\r\n    }\r\n  }, [adjustHeight]);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => adjustHeight();\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, [adjustHeight]);\r\n\r\n  return { textAreaRef, adjustHeight };\r\n}\r\n",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}